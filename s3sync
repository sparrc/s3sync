#!/bin/bash

SYNC_DIR=$(jq -r .syncdir < "$HOME/.s3sync/config.json")
BUCKET=$(jq -r .bucket < "$HOME/.s3sync/config.json")
ARCHIVE_INTERVAL=$(jq -r .archive_interval_days < "$HOME/.s3sync/config.json")

if [ ! -d "$SYNC_DIR" ]; then
    mkdir -p "$SYNC_DIR"
fi

if [[ "$ARCHIVE_INTERVAL" -eq "" ]]; then
    ARCHIVE_INTERVAL="30"
fi

if [ ! -f "$HOME/.s3sync/ts" ]; then
    echo -n 0 > "$HOME/.s3sync/ts"
fi

if ! aws s3 ls "s3://$BUCKET/ts"; then
    aws s3 cp "$HOME/.s3sync/ts" "s3://$BUCKET/ts"
fi

makeArchive() {
    DAYS_SINCE_EPOCH=$(($(date +%s) / 86400))
    LAST_ARCHIVE_DAY=$(aws s3 cp "s3://$BUCKET/archive_ts" - --quiet)
    if [[ "$LAST_ARCHIVE_DAY" -eq "" ]]; then
        aws s3api put-bucket-lifecycle-configuration --bucket "$BUCKET" --lifecycle-configuration "file://$HOME/.s3sync/lifecycle.json"
        LAST_ARCHIVE_DAY="0"
    fi
    DAYS_SINCE_ARCHIVE=$((DAYS_SINCE_EPOCH - LAST_ARCHIVE_DAY))
    if [[ "$DAYS_SINCE_ARCHIVE" -gt "$ARCHIVE_INTERVAL" ]]; then
        now=$(date -u +%FT%TZ)
        echo "$now Creating archive: s3://$BUCKET/archives/$now/"
        if aws s3 cp "s3://$BUCKET/sync/" "s3://$BUCKET/archives/$now/" --storage-class DEEP_ARCHIVE --recursive --no-progress; then
            echo -n "$DAYS_SINCE_EPOCH" > /tmp/archive_ts
            aws s3 cp /tmp/archive_ts "s3://$BUCKET/archive_ts"
        fi
    fi
}

acquireLock() {
    while true
    do
        aws s3api wait object-not-exists --bucket "$BUCKET" --key lock &>/dev/null
        if [ $? -eq 255 ]; then
            echo "$(date -u +%FT%TZ) Someone else has the lock, waiting..."
        else
            aws s3 cp "$HOME/.s3sync/lock" "s3://$BUCKET/lock" --quiet
            echo "$(date -u +%FT%TZ) Acquired lock"
            return 0
        fi
    done
}

releaseLock() {
    while true
    do
        if aws s3 rm "s3://$BUCKET/lock" --quiet; then
            echo "$(date -u +%FT%TZ) Released lock"
            return 0
        fi
        echo "$(date -u +%FT%TZ) Error trying to release lock, trying again in 10s"
        sleep 10
    done
}

rotateLog() {
    echo "$(date -u +%FT%TZ) Rotating logfile"
    xz < ./sync.log > "./sync.log.$(date -u +%F).xz"
    truncate ./sync.log -s 0
    echo "$(date -u +%FT%TZ) Logfile rotated"
}

while true
do
    acquireLock
    NOW=$(date -u "+%s")
    # get latest timestamp from remote:
    TS_REMOTE=$(aws s3 cp "s3://$BUCKET/ts" - --quiet)
    TS_LOCAL=$(cat "$HOME/.s3sync/ts")
    if [ "$TS_REMOTE" -gt "$TS_LOCAL" ]; then
        echo "$(date -u +%FT%TZ) Syncing local directory from remote to local"
        echo -n "$TS_REMOTE" > "$HOME/.s3sync/ts"
        aws s3 sync "s3://$BUCKET/sync" "$SYNC_DIR" --delete --no-progress
    else
        diff=$(aws s3 sync "$SYNC_DIR" "s3://$BUCKET/sync" --delete --storage-class ONEZONE_IA --no-progress)
        if [[ "$diff" != "" ]]; then
            echo "$diff"
            # we made a change, update timestamps
            echo "$(date -u +%FT%TZ) Local directory synced to remote"
            echo -n "$NOW" > "$HOME/.s3sync/ts"
            aws s3 cp "$HOME/.s3sync/ts" "s3://$BUCKET/ts" --no-progress
        fi
    fi
    makeArchive
    releaseLock
    # rotate the log if it exists:
    if [ -f ./sync.log ]; then
        if [[ "$(wc -c < ./sync.log)" -gt 5000000 ]]; then
            rotateLog
        fi
    fi
    sleep 120
done

